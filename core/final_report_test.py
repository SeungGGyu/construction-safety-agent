import os
import requests
from docx import Document
from datetime import datetime
import requests


LLM_URL = "http://211.47.56.73:8908"
LLM_TOKEN ="token-abc123"
LLM_MODEL = "Qwen/Qwen3-30B-A3B-GPTQ-Int4"



def save_report_to_word(report_text: str, output_dir: str = "./reports"):
    """생성된 보고서를 Word 파일로 저장"""
    os.makedirs(output_dir, exist_ok=True)

    # 파일명에 날짜 포함
    filename = f"건설사고_재발방지대책보고서_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
    filepath = os.path.join(output_dir, filename)

    # Word 문서 작성
    doc = Document()
    doc.add_heading("건설 사고 재발 방지 대책 보고서", level=0)

    # 줄 단위로 구분해서 문단 추가
    for line in report_text.split("\n"):
        if line.strip():
            doc.add_paragraph(line.strip())

    doc.save(filepath)
    print(f"✅ 보고서가 Word 파일로 저장되었습니다: {filepath}")
    return filepath



rag_output = '''
📝 입력 쿼리: 기본 쿼리: "건축 철근콘크리트공사 설치작업 고소작업 추락 위험 안전난간대 안전고리 미흡" 부스팅 쿼리: "건축 철근콘크리트공사 설치작업 고소작업 추락 위험 안전난간대 안전고리 미흡 법규 기준 지침 체크리스트 조항

=== 최종 응답 ===

**사고 개요**:

고소작업(철근콘크리트공사 설치작업) 중 안전난간 및 안전고리 미흡으로 인해 추락 위험이 발생한 사고입니다.

**위험 요인**:

- 안전난간 등 추락 방호 조치 미흡[#1, #3]
- 작업발판 높이가 25cm 이내로 설치되지 않아 추락 위험[#1]
- 천장 높이에 맞는 비계 등 적절한 작업발판 미설치[#1]
- 작업발판 위에 말비계, 사다리 등 추가 설치 금지 위반[#1]
- 안전고리 미착용 및 미설치로 인한 추락 위험[#2]

**즉시 조치**:

- 작업발판의 높이를 천장 높이에 맞게 조정하고, 25cm 이내로 재설치[#1]
- 모든 작업발판에 안전난간 등 추락 방호 조치 신속히 실시[#1, #3]
- 작업발판 위에 말비계, 사다리 등 추가 설치 금지 준수[#1]
- 안전고리(안전벨트 등) 착용 및 작업 전 점검 철저히 시행[#2]
- 작업 종료 후 작업발판 및 주변 정리정돈 및 청소 실시[#2, #15]
- 작업 전 위험성 평가 및 연계 위험요소 근로자에게 주지[#6]

**관련 규정**:

- 내장공사의 안전보건작업 지침.pdf, p.8 [#1]
- 내장공사의 안전보건작업 지침.pdf, p.7 [#2]
- 단순 슬래브 콘크리트 타설 안전보건작업 지침.pdf, p.5 [#3]
- 교량공사의 이동식 비계공법(MSS) 안전작업 지침.pdf, p.8 [#4]
- 내장공사의 안전보건작업 지침.pdf, p.4 [#5]
- 화학플랜트 개보수 공사 안전보건작업 기술지침.pdf, p.7 [#6]
- 철골공사 무지보 거푸집동바리(데크플레이트 공법)안전보건작업 지침.pdf, p.15 [#7]
- 작업의자형 달비계 안전작업 지침.pdf, p.3 [#8]
'''


# === 1. 보고서 생성 함수 ===
def generate_accident_report(rag_output: str) -> str:
    """RAG 기반 사고 정보를 입력받아 건설 사고 재발 방지 대책 보고서를 생성"""

    system_message = {
        "role": "system",
        "content": """

당신은 건설 안전 및 사고 재발 방지 보고서를 전문적으로 작성하는 전문가입니다.  
입력으로 제공되는 RAG 분석 결과(<chunk>)에는 ‘사고 개요’, ‘위험 요인’, ‘즉시 조치’, ‘관련 규정’이 포함되어 있습니다.  
이 정보를 바탕으로 **Word 기준 약 4페이지 분량(약 1800~2200 단어)**의 정식 보고서를 작성하십시오.

---

<instruction>
- 주어진 <chunk>의 내용을 직접 인용·확장하여, 실제 기업에서 사용하는 **사고 재발 방지 대책 보고서 초안**을 작성하십시오.
- 보고서는 요약이 아니라 **분석형 문서**여야 하며, 사고 발생 배경, 원인 분석, 법규 검토, 개선 방안을 종합적으로 다루어야 합니다.
- 각 항목은 구체적인 근거, 예시, 조치 방안을 포함해야 합니다.
- 문체는 공식적이고 보고서에 적합한 **형식적·전문적 어조**로 작성하십시오.
</instruction>

---

<requirements>
1. 보고서 구성  
   다음 항목 구조를 따르십시오. (필요 없는 항목은 생략 가능하나 전체 분량은 유지)
   1. 목적  
   2. 사고 개요 및 경과  
   3. 사고 원인 분석  
       3.1 직접 원인  
       3.2 간접 원인  
   4. 관련 법규 및 기준 검토  
   5. 재발 방지 대책  
       5.1 기술적 대책  
       5.2 관리적 대책  
       5.3 제도적 대책  
   6. 결론 및 권고사항  
   7. 부록 (체크리스트 또는 참고문헌)

2. 입력 데이터 활용 지침  
   - “사고 개요” 항목 → `사고 개요 및 경과` 항목으로 확장  
   - “위험 요인” 항목 → `사고 원인 분석`으로 변환 (직접/간접 원인 구분 포함)  
   - “즉시 조치” 항목 → `재발 방지 대책`의 기술적·관리적 개선안의 기초로 반영  
   - “관련 규정” 항목 → `관련 법규 및 기준 검토`, `제도적 대책`에 근거로 인용  

3. 세부 지침  
   - 각 항목은 문단 단위로 충분히 상세하게 작성 (Word 약 4쪽 분량 유지)  
   - “직접 원인”은 현장의 물리적 결함, 즉시적 요인 중심으로 기술  
   - “간접 원인”은 관리, 절차, 교육, 제도 미흡 등 조직적 원인 중심으로 서술  
   - 법규 검토 시 「산업안전보건기준에 관한 규칙」, KOSHA GUIDE, 건설안전지침 등을 언급 가능  
   - 재발 방지 대책은 반드시 “기술적 / 관리적 / 제도적” 세 영역으로 나누어라.  
   - 문장은 공문서 톤으로 작성하되, 원인 → 조치 → 효과 순의 논리 흐름을 유지할 것.  
   - 인용된 규정의 번호는 [#1], [#2] 형태로 남겨 두어도 된다.

4. 출력 형식 및 분량  
   - 출력은 실제 건설사 안전관리 부서가 제출하는 **정식 보고서 수준의 상세 문서**여야 한다.  
   - 각 항목은 서론, 본론, 결론 구조를 포함하고, 문단 간 논리 흐름을 유지할 것.  
   - 전체 분량은 Word 기준 약 4페이지(1800~2200 단어) 수준으로, **간결한 요약이 아닌 풍부한 서술**로 작성한다.  
   - 불필요한 Markdown 문법(#, *, **)은 포함하지 않는다.  
   - 결과는 단일 텍스트 형태로 출력하며, 각 항목 간 명확히 줄바꿈한다.
</requirements>
"""
    }

    user_message = {
        "role": "user",
        "content": f"다음은 RAG 분석 결과이다. 이를 토대로 보고서를 작성하라:\n\n{rag_output}"
    }

    payload = {
        "model": LLM_MODEL,
        "messages": [system_message, user_message],
        "max_tokens": 25000,
        "temperature": 0.3,
        "top_p": 0.9, 
    }

    try:
        r = requests.post(f"{LLM_URL}/chat/completions",
                          headers={"Authorization": f"Bearer {LLM_TOKEN}", "Content-Type": "application/json"},
                          json=payload, timeout=120)
        r.raise_for_status()
        data = r.json()
        return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        print(f"⚠️ 보고서 생성 실패: {e}")
        return "보고서 생성 실패"


# === 3. main 함수 ===
def main():
    report = generate_accident_report(rag_output)
    print("===== 건설 사고 재발 방지 대책 보고서 초안 =====\n")
    print(report)


if __name__ == "__main__":
    main()





